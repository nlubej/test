/* eslint-disable */
// This file was autogenerated from DMN file

const {dmnRunService} = require("@adinsure/runtime");
const {ChronoUnit, LocalDate} = require('@js-joda/core');

module.exports = function businessRule(input, options) {
    return dmnRunService.runService(input, service_RidersForCoverage, options);
};

const service_RidersForCoverage = {
    "decisions": {
        "RidersForCoverage": {
            expression(context) { 
                return dmnRunService.applyHitPolicy("COLLECT", "", 
                    [
                        { condition: context["coverageKey"] == "mtpl", outputs: {"riderKey": "activityDamageExtension", "group": "CoverageExtension"} },
                        { condition: (context["coverageKey"] == "casco" || context["coverageKey"] == "combinationB" || context["coverageKey"] == "combinationD" || context["coverageKey"] == "combinationE" || context["coverageKey"] == "combinationH" || context["coverageKey"] == "combinationJ" || context["coverageKey"] == "combinationK" || context["coverageKey"] == "cascoCollision"), outputs: {"riderKey": "additionalEquipmentCoverages", "customMapping": true} },
                        { condition: (context["coverageKey"] == "casco" || context["coverageKey"] == "combinationB" || context["coverageKey"] == "combinationD" || context["coverageKey"] == "combinationE" || context["coverageKey"] == "combinationH" || context["coverageKey"] == "combinationJ" || context["coverageKey"] == "combinationK" || context["coverageKey"] == "cascoCollision"), outputs: {"riderKey": "outsideEuAreaExtension", "group": "CoverageExtension"} },
                        { condition: (context["coverageKey"] == "casco" || context["coverageKey"] == "combinationB" || context["coverageKey"] == "combinationD" || context["coverageKey"] == "combinationE" || context["coverageKey"] == "combinationH" || context["coverageKey"] == "combinationJ" || context["coverageKey"] == "combinationK" || context["coverageKey"] == "cascoCollision"), outputs: {"riderKey": "participationInRacesExtension", "group": "CoverageExtension"} },
                        { condition: (context["coverageKey"] == "casco" || context["coverageKey"] == "combinationB" || context["coverageKey"] == "combinationD" || context["coverageKey"] == "combinationE" || context["coverageKey"] == "combinationH" || context["coverageKey"] == "combinationJ" || context["coverageKey"] == "combinationK" || context["coverageKey"] == "cascoCollision"), outputs: {"riderKey": "waterEntrapmentExtension", "group": "CoverageExtension"} },
                        { condition: (context["coverageKey"] == "casco" || context["coverageKey"] == "combinationB" || context["coverageKey"] == "combinationD" || context["coverageKey"] == "combinationE" || context["coverageKey"] == "combinationH" || context["coverageKey"] == "combinationJ" || context["coverageKey"] == "combinationK" || context["coverageKey"] == "cascoCollision"), outputs: {"riderKey": "vehicleSinkingExtension", "group": "CoverageExtension"} },
                        { condition: (context["coverageKey"] == "casco" || context["coverageKey"] == "combinationB" || context["coverageKey"] == "combinationD" || context["coverageKey"] == "combinationE" || context["coverageKey"] == "combinationH" || context["coverageKey"] == "combinationJ" || context["coverageKey"] == "combinationK" || context["coverageKey"] == "cascoCollision"), outputs: {"riderKey": "sanationAvalanchesAndLandslidesExtension", "group": "CoverageExtension"} },
                    ]
                        .filter(r => r.condition).map(r => r.outputs)
                );
            },
            requiredDecisions: []
        }
    },
    "outputDecisions": ["RidersForCoverage"],
    "unboxOutput": true
};
